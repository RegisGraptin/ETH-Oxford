import * as dotenv from 'dotenv';
dotenv.config();
import ethers from "ethers";
import lighthouse from '@lighthouse-web3/sdk';

// Function to sign authentication message
const signAuthMessage = async (publicKey, privateKey) => {
    const provider = new ethers.JsonRpcProvider();
    const signer = new ethers.Wallet(privateKey, provider);
    const messageRequested = (await lighthouse.getAuthMessage(publicKey)).data.message;
    const signedMessage = await signer.signMessage(messageRequested);
    return signedMessage;
}

// Apply access control conditions
const accessControl = async () => {
    // CID generated by uploading a file with encryption
    const cid = "Qma7Na9sEdeM6aQeu6bUFW54HktNnW2k8g226VunXBhrn7";
    const publicKey = "0xa3c960b3ba29367ecbcaf1430452c6cd7516f588";
    const privateKey = process.env.PRIVATE_KEY;

    const conditions = [
        {
            id: 1,
            chain: "Mumbai",
            method: "get_access",
            standardContractType: "DataLockerContract",
            contractAddress: "0x176c775Bc7D842f97c9c95bd94D948ba5778391f",
            returnValueTest: {
                comparator: "==",
                value: "true"
            },
            parameters: [0],
            inputArrayType: [],
            outputType: "bool"
        }
    ];
    const aggregator = "([1])";

    const signedMessage = await signAuthMessage(publicKey, privateKey);

    const response = await lighthouse.applyAccessCondition(
        publicKey,
        cid,
        signedMessage,
        conditions,
        aggregator
    );

    console.log(response);
}

accessControl();